{"version":3,"sources":["hoc/Aux/Aux.js","components/Navigation/Toolbar/Styles.js","components/Navigation/Toolbar/Toolbar.js","components/PlateControls/PlateControls.js","components/Plates/Styles.js","components/Plates/Plates.js","components/Key/Key.js","containers/Layout/Styles.js","containers/Layout/Layout.js","App.js","serviceWorker.js","index.js"],"names":["aux","props","children","Heading","styled","div","toolbar","plateControls","style","paddingBottom","paddingTop","onChange","change","value","Bar","Sleeve","width","Plate","RedPlate","BluePlate","YellowPlate","GreenPlate","GreyPlate","RedFracPlate","YellowFracPlate","plates","weight","sleeve","push","key","reversedPlates","reverse","display","alignItems","length","colSpan","backgroundColor","height","Centered","FlexCentered","Layout","state","bench","squat","dead","showRoutine","plateControlChangedHandler","event","isNaN","target","setState","this","Aux","Toolbar","PlateControls","Plates","Key","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7a3a6e23.chunk.js","sourcesContent":["const aux = (props) => props.children;\n\nexport default aux;","import styled from 'styled-components';\n\nexport const Heading = styled.div`\n    padding: 1px;\n    background-color: lightblue;\n    font-size: 20px;\n    font-weight: bold;\n`;","import React from 'react';\nimport * as Styles from './Styles';\n\nconst toolbar = (props) => {\n    return(\n        <Styles.Heading>\n            <p>Olympic Barbell Plate Calculator</p>\n        </Styles.Heading>\n    );\n}\n\nexport default toolbar;","import React from 'react';\n\nconst plateControls = (props) => {\n    return(\n        <div style={{paddingBottom: '30px', paddingTop: '30px'}}>\n            <div style={{paddingBottom: '15px'}}>Please enter the weight you wish to calculate</div>\n            <input onChange={props.change} value={props.value}></input>\n        </div>\n    )\n}\n\nexport default plateControls;","import styled from 'styled-components';\n\nexport const Bar = styled.div`\n    height: 10px;\n    width: 100px;\n    background-color: silver;\n`;\n\nexport const Sleeve = styled.div`\n    height: 20px;\n    width: ${(props) => props.width};\n    background-color: silver;\n`;\n\nexport const Plate = styled.div`\n    border-radius: 5px;\n    height: 100px;\n    color: white;\n`;\n\nexport const RedPlate = styled(Plate)`\n    width: 15px;\n    background-color: red;\n`;\n\nexport const BluePlate = styled(Plate)`\n    width: 15px;\n    background-color: blue;\n`;\n\nexport const YellowPlate = styled(Plate)`\n    width: 15px;\n    background-color: yellow;\n`;\n\nexport const GreenPlate = styled(Plate)`\n    width: 15px;\n    background-color: green;\n`;\n\nexport const GreyPlate = styled(Plate)`\n    width: 15px;\n    background-color: grey;\n`;\n\nexport const RedFracPlate = styled(Plate)`\n    height: 50px;\n    width: 15px;\n    background-color: red;\n`;\n\nexport const YellowFracPlate = styled(Plate)`\n    height: 50px;\n    width: 15px;\n    background-color: yellow;\n`;","import React from 'react';\nimport * as Styles from './Styles';\n\nconst plates = (props) => {\n    const plates = [];\n    let weight=props.weight;\n    let sleeve=140;\n    if(weight>20){\n        weight = (weight-20)/2;\n        if((weight-25)>=0){\n            plates.push(<Styles.RedPlate key='25'></Styles.RedPlate>);\n            weight-=25;\n            sleeve-=15;\n        }\n        if((weight-20)>=0){\n            plates.push(<Styles.BluePlate key='20'></Styles.BluePlate>);\n            weight-=20;\n            sleeve-=15;\n        }\n        if((weight-15)>=0){\n            plates.push(<Styles.YellowPlate key='15'></Styles.YellowPlate>);\n            weight-=15;\n            sleeve-=15;\n        }\n        if((weight-10)>=0){\n            plates.push(<Styles.GreenPlate key='10'></Styles.GreenPlate>);\n            weight-=10;\n            sleeve-=15;\n        }\n        if((weight-5)>=0){\n            plates.push(<Styles.GreyPlate key='5'></Styles.GreyPlate>);\n            weight-=5;\n            sleeve-=15;\n        }\n        if((weight-2.5)>=0){\n            plates.push(<Styles.RedFracPlate key='2.5'></Styles.RedFracPlate>);\n            weight-=2.5;\n            sleeve-=15;\n        }\n        if((weight-1.25)>=0){\n            plates.push(<Styles.YellowFracPlate key='1.25'></Styles.YellowFracPlate>);\n            weight-=1.25;\n            sleeve-=15;\n        }\n    }\n    \n\n    //add empty sleeve space to plates\n    plates.push(<Styles.Sleeve width={sleeve + 'px'} key='sleeve'/>)\n\n    //swap order of plates for left side of bar\n    const reversedPlates = [...plates].reverse();\n\n    return(\n        <div style={{display: 'flex', alignItems: 'center'}}>\n            {reversedPlates}\n            {plates.length>0 ? \n                <Styles.Bar /> : \n                weight===20 ?\n                <Styles.Bar /> :\n                null}\n            {plates}\n        </div>\n    )\n}\n\nexport default plates;","import React from 'react';\n// import * as Styles from './Styles';\n\nconst key = (props) => {\n    return(\n        <div>\n            <h3>Key</h3>\n            <table>\n                <tbody>\n                <th colSpan=\"5\">Full Plates</th>\n                <tr>\n                    <td style={{backgroundColor: 'red', width: '20px', height: '100%'}}></td>\n                    <td>25KG</td>\n                    <td style={{width: '50px'}}></td>\n                    <td style={{backgroundColor: 'blue', width: '20px', height: '100%'}}></td>\n                    <td>20KG</td>\n                </tr>\n                <tr>\n                    <td style={{backgroundColor: 'yellow', width: '20px', height: '100%'}}></td>\n                    <td>15KG</td>\n                    <td style={{width: '50px'}}></td>\n                    <td style={{backgroundColor: 'green', width: '20px', height: '100%'}}></td>\n                    <td>10KG</td>\n                </tr>\n                <tr>\n                    <td style={{backgroundColor: 'grey', width: '20px', height: '100%'}}></td>\n                    <td>5KG</td>\n                </tr>\n                <th colSpan=\"5\">Fractional Plates</th>\n                <tr>\n                    <td style={{backgroundColor: 'red', width: '20px', height: '50%'}}></td>\n                    <td>2.5KG</td>\n                    <td style={{width: '50px'}}></td>\n                    <td style={{backgroundColor: 'green', width: '20px', height: '100%'}}></td>\n                    <td>10KG</td>\n                </tr>\n                </tbody>\n            </table>\n            \n        </div>\n    )\n}\n\nexport default key;","import styled from 'styled-components';\n\nexport const Centered = styled.div`\n    text-align: center;\n`;\n\nexport const FlexCentered = styled.div`\n    display: flex;\n    justify-content: center;\n    padding-bottom: 30px;\n`;","import React, { Component } from 'react';\n\nimport Aux from '../../hoc/Aux/Aux';\nimport Toolbar from '../../components/Navigation/Toolbar/Toolbar';\nimport PlateControls from '../../components/PlateControls/PlateControls';\nimport Plates from '../../components/Plates/Plates';\nimport Key from '../../components/Key/Key';\nimport * as Styles from './Styles';\n\nclass Layout extends Component{\n    state = {\n        bench: null,\n        squat: null,\n        dead: null,\n        showRoutine: false,\n        weight: 20\n    }\n\n    plateControlChangedHandler = (event) => {\n        if (!isNaN(event.target.value)){\n            this.setState({weight: event.target.value});\n        }\n    }\n\n    render() {\n        let showRoutines = this.state.showRoutine;\n        return (\n            <Aux>\n                <Styles.Centered>\n                    <Toolbar />\n                    <PlateControls change={this.plateControlChangedHandler} value={this.state.weight}/>\n                    <Styles.FlexCentered>\n                        <Plates weight={this.state.weight}/>\n                    </Styles.FlexCentered>\n                    <Styles.FlexCentered>\n                        <Key/>\n                    </Styles.FlexCentered>\n                </Styles.Centered>\n            </Aux>\n        );\n    };\n}\n\nexport default Layout;","import React, {Component} from 'react';\n// import Headline from './Headline/Headline';\n// import UserInput from './UserInput/UserInput'\n// import Routine from './Routine/Routine';\nimport Layout from './containers/Layout/Layout';\nimport './App.css';\n\n\n\nclass App extends Component {\n  // state={\n  //   bench: 0,\n  //   squat: 0,\n  //   deadlift: 0,\n  //   showRoutine: false,\n  //   multiplicationFactors: [\n  //     { weight: 0.8, amount: 'x2x6' },\n  //     { weight: 0.8, amount: 'x3x6' },\n  //     { weight: 0.8, amount: 'x2x6' },\n  //     { weight: 0.8, amount: 'x4x6' },\n  //     { weight: 0.8, amount: 'x2x6' },\n  //     { weight: 0.8, amount: 'x5x6' },\n  //     { weight: 0.8, amount: 'x2x6' },\n  //     { weight: 0.8, amount: 'x6x6' },\n  //     { weight: 0.8, amount: 'x2x6' },\n  //     { weight: 0.85, amount: 'x5x5' },\n  //     { weight: 0.8, amount: 'x2x6'}\n  //   ],\n  //   routine: []\n  // }\n\n  // benchChangeHandler = (event) => {\n  //   this.setState({\n  //     bench: event.target.value\n  //   })\n  // };\n  // squatChangeHandler = (event) => {\n  //   this.setState({\n  //     squat: event.target.value\n  //   })\n  // }\n  // deadliftChangeHandler = (event) => {\n  //   this.setState({\n  //     deadlift: event.target.value\n  //   })\n  // }\n\n  // generateRoutine = () => {\n  //   const benchRoutine = [];\n  //   const squatRoutine = [];\n  //   const deadliftRoutine = [];\n  //   this.state.multiplicationFactors.map(factor => {\n  //     benchRoutine.push({weight: Math.floor(this.state.bench * factor.weight), reps: factor.amount});\n  //     return null;\n  //   });\n  //   this.state.multiplicationFactors.map(factor => {\n  //     squatRoutine.push({weight: Math.floor(this.state.squat * factor.weight), reps: factor.amount});\n  //     return null;\n  //   });\n  //   this.state.multiplicationFactors.map(factor => {\n  //     deadliftRoutine.push({weight: Math.floor(this.state.deadlift * factor.weight), reps: factor.amount});\n  //     return null;\n  //   });\n  //   this.setState({\n  //     routine: [{type: 'bench', routine: {benchRoutine}}, {type: 'squat', routine: {squatRoutine}}, {type: 'deadlift', routine: {deadliftRoutine}}],\n  //     showRoutine: true\n  //   })\n  // }\n\n  \n\n  render () {\n    // let showRoutine = null;\n    // const displayRoutine = () => {\n    //   if(this.state.showRoutine){\n    //     return showRoutine = <Routine routine={this.state.routine}/>\n    //   }\n    // }\n\n    // showRoutine = displayRoutine();\n    return (\n      <Layout>\n        \n      </Layout>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}